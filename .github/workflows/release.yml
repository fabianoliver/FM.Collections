name: Release

on:
  push:
    tags:
      - "[0-9]+.[0-9]+.[0-9]+"

jobs:
  build:
    name: Create release
    runs-on: ubuntu-latest
    steps:
      - name: Pull code
        uses: actions/checkout@v4
      - name: Use .NET
        uses: actions/setup-dotnet@v4
        with:
          global-json-file: global.json
      - name: Set VERSION variable from tag
        run: echo "VERSION=$(git describe --tags --abbrev=0)" >> $GITHUB_ENV
      - name: Print version
        run: echo "Version is ${{ env.VERSION }}"
      - name: Build packages
        run: |
          set -xe

          release_directory=releases
          pack_flags="--configuration Release --output $release_directory /p:ContinuousIntegrationBuild=true /p:Version=${VERSION}"

          dotnet pack $pack_flags "FM.Collections.MinMaxHeap"
          dotnet pack $pack_flags "FM.Collections.MinMaxHeapDictionary"
          dotnet pack $pack_flags "FM.Collections.ImmutableCopyOnWriteDictionary"
        shell: bash
      - name: Draft GitHub release
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs').promises;

            const releaseDirectory = './releases';

            const release = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,

              // strip refs/tags/ prefix if present, otherwise release download links break:
              tag_name: process.env.GITHUB_REF.replace(/^(?:.+\/)?([^\/]+)$/, '$1'),
              target_commitish: context.sha,

              // maintainer will add notes and publish:
              draft: true
            });

            await Promise.all((await fs.readdir(releaseDirectory)).map(async file => {
              await github.rest.repos.uploadReleaseAsset({
                data: await fs.readFile(`${releaseDirectory}/${file}`),
                name: file,
                owner: context.repo.owner,
                release_id: release.data.id,
                repo: context.repo.repo
              });
            }));